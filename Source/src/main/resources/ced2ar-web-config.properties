configInitialized=${config.initialized}
# Currently baseXDB required to be set with 'https', not 'http'
baseXDB=${basex.db}
baseXReaderHash=${basex.reader.hash}
baseXWriterHash=${basex.writer.hash}
baseXAdminHash=${basex.admin.hash}
basexGenerateRandomPasswords=${basex.generate.random.passwords}
baseXAllowChangePasswords=${basex.allow.change.passwords}

neo4jEndpoint=${neo4j.endpoint}
neo4jHash=${neo4j.hash}
 
#Email to send the bugReport to
bugReportEnable=${bug.report.enable}
bugReportEmail=${bug.report.email}
bugReportSender=${bug.report.sender}
bugReportPwd=${bug.report.pwd}

#Port on which the web application runs
port=${port}
		
#Switch to determine if in a restricted environment 
restricted=${env.restricted}
	
#Timeout constant
timeout=${timeout.constant}

#
#Passwords
#
pwdIsRandom=${pwd.israndom}
pwdHash=${pwd.hash}
# Let anyone who can authenticate (e.g. with ORCID) assume ROLE_USER:
openAccess=${open.access}

#
# Access Mode: configure private servers
#
accessMode=${access.mode}


#Features
devFeatureProv=${dev.feature.prov}
devFeatureGoogleAnalytics=${dev.feature.google.analytics}
devFeatureEditing=${dev.feature.editing}

#Crowdsourcing Config
remoteURL = ${remote.ced2ar.url}
crowdSourcingRole = ${crowdsourcing.role}

#Schema locations
schemaURI=${schema.uri}

#PDF generation
pdfGenerationTaskCronExpression=${pdf.generator.scheduled.task.cron.interval}
pdfEnabled=${pdf.enabled}

#Version control
gitEnabled=${git.enabled}
remoteRepoURL=${remote.repo.url}
remoteBranch=${remote.branch}
remoteUser=${remote.user}
remotePass=${remote.pass}
localBranch=${local.branch}
numberOfCommitsToPushRemote=${number.of.commits.to.push.remote}
gitRemotePushCronExpression=${git.remote.push.cron.expression}
gitLocalCommitCronExpression=${git.local.commit.cron.expression}

authenticationType=${authentication.type}
supportedOauth2Providers=${supported.oauth2.providers}
authorizationStorage=${authorization.storage}

#OAUTH2 Configuration
authCode=${oauth2.authCode}

googleDefaultFilterURL=${google.oauth2.defaultFilterURL}
googleClientId=${google.oauth2.clientId}
googleClientSecret=${google.oauth2.clientSecret}
googleAccessTokenURL=${google.oauth2.accessTokenURL}
googleAuthURL=${google.oauth2.authURL}
googleTokenURL=${google.oauth2.tokenURL}
googlePreEstabledURL=${google.oauth2.preEstabledURL}
googleInfoReq=${google.oauth2.infoReq}
googlePersonInfoURL=${google.oauth2.personInfoURL}

orcidDefaultFilterURL=${orcid.oauth2.defaultFilterURL}
orcidClientId=${orcid.oauth2.clientId}
orcidClientSecret=${orcid.oauth2.clientSecret}
orcidAccessTokenURL=${orcid.oauth2.accessTokenURL}
orcidAuthURL=${orcid.oauth2.authURL}
orcidTokenURL=${orcid.oauth2.tokenURL}
orcidPreEstabledURL=${orcid.oauth2.preEstabledURL}
orcidInfoReq=${orcid.oauth2.infoReq}
orcidPersonInfoURL=${orcid.oauth2.personInfoURL}

#Name of web application that the editing API runs under. Needs to be local.
#Obsolete
#eAPI=${e.api}

#UI Navbar customization
uiNavBarBrowseCodebook=${ui.nav.bar.browse.codebook}
uiNavBarBrowseCodebookLabel=${ui.nav.bar.browse.codebook.label}
uiNavBarBrowseStudy=${ui.nav.bar.browse.study}
uiNavBarBrowseStudyLabel=${ui.nav.bar.browse.study.label}

#UI Tab customization (DDI tabs)  .
uiNavTabDoc=${ui.nav.tab.doc}
uiNavTabDocLabel=${ui.nav.tab.doc.label}
uiNavTabStdy=${ui.nav.tab.stdy}
uiNavTabStdyLabel=${ui.nav.tab.stdy.label}
uiNavTabFile=${ui.nav.tab.file}
uiNavTabFileLabel=${ui.nav.tab.file.label}
uiNavTabData=${ui.nav.tab.data}
uiNavTabDataLabel=${ui.nav.tab.data.label}
uiNavTabOtherMat=${ui.nav.tab.otherMat}
uiNavTabOtherMatLabel=${ui.nav.tab.otherMat.label}
